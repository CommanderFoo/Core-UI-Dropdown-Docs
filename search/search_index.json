{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UI Dropdown Documentation Welcome to the documentation for the UI Dropdown component found in Core Community Content. This component will allow your players to pick an option from a dropdown list. It contains easy to use events and is easy to customise. If you want to get up and running quickly, then read the Quick Start guide, otherwise I would recommend reading through the pages and then try out the example that comes with the content.","title":"Home"},{"location":"#ui-dropdown-documentation","text":"Welcome to the documentation for the UI Dropdown component found in Core Community Content. This component will allow your players to pick an option from a dropdown list. It contains easy to use events and is easy to customise. If you want to get up and running quickly, then read the Quick Start guide, otherwise I would recommend reading through the pages and then try out the example that comes with the content.","title":"UI Dropdown Documentation"},{"location":"context/","text":"Context It's good habit to put all your UI into a Client Context. The Server doesn't need to know about the UI components, client side scripts should be used for updating the UI. The UI Dropdown component will throw an error if it's not in a Client Context as there is a client script that handles setup and events. More information on Contexts","title":"Context"},{"location":"context/#context","text":"It's good habit to put all your UI into a Client Context. The Server doesn't need to know about the UI components, client side scripts should be used for updating the UI. The UI Dropdown component will throw an error if it's not in a Client Context as there is a client script that handles setup and events. More information on Contexts","title":"Context"},{"location":"events/","text":"Events The UI Dropdown component has a simple event system using broadcasts . If you have set the event property then your event call will be made up with the name of your event you picked. Any custom event should be unique for each dropdown. So for example if you have a Weapons Dropdown and you set the event property to weapons , then your event will be like so. 1 2 3 Events . Connect ( \"on_weapons_selected\" , function ( index , option , value )) Events . Broadcast ( \"on_weapons_enable\" ) Events . Broadcast ( \"on_weapons_disable\" ) Otherwise if you don't set an event, then they will be called using dropdown instead. 1 2 3 Events . Connect ( \"on_dropdown_selected\" , function ( index , option , value )) Events . Broadcast ( \"on_dropdown_enable\" ) Events . Broadcast ( \"on_dropdown_disable\" ) Here are a list of the events are what they do. Default Event Name Return Type Description on_dropdown_selected Event Fires when an option in the dropdown has been selected. The value is the option property setup by you or it is nil . Default Event Name Parameters Description on_dropdown_enable None The component listens for this event and enables the drop down. on_dropdown_disable boolean The component listens for this event and disables the drop down. You can pass in a boolean value if you want the dropdown selected option to be cleared. Default is false .","title":"Events"},{"location":"events/#events","text":"The UI Dropdown component has a simple event system using broadcasts . If you have set the event property then your event call will be made up with the name of your event you picked. Any custom event should be unique for each dropdown. So for example if you have a Weapons Dropdown and you set the event property to weapons , then your event will be like so. 1 2 3 Events . Connect ( \"on_weapons_selected\" , function ( index , option , value )) Events . Broadcast ( \"on_weapons_enable\" ) Events . Broadcast ( \"on_weapons_disable\" ) Otherwise if you don't set an event, then they will be called using dropdown instead. 1 2 3 Events . Connect ( \"on_dropdown_selected\" , function ( index , option , value )) Events . Broadcast ( \"on_dropdown_enable\" ) Events . Broadcast ( \"on_dropdown_disable\" ) Here are a list of the events are what they do. Default Event Name Return Type Description on_dropdown_selected Event Fires when an option in the dropdown has been selected. The value is the option property setup by you or it is nil . Default Event Name Parameters Description on_dropdown_enable None The component listens for this event and enables the drop down. on_dropdown_disable boolean The component listens for this event and disables the drop down. You can pass in a boolean value if you want the dropdown selected option to be cleared. Default is false .","title":"Events"},{"location":"example/","text":"Example The UI Dropdown component comes with a working example that shows you a simple setup along with an example of how to use the events system. Drag and drop the UI Dropdown Example template into your hierarchy. This example already has a client context and UI container setup. Enter play mode and test the 2 drop downs. Example Script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 -- Text UI components to show what was picked local fruit_text = script : GetCustomProperty ( \"fruit_text\" ): WaitForObject () local apple_text = script : GetCustomProperty ( \"apple_text\" ): WaitForObject () -- Our dropdown has the event set to \"fruit\". -- Here we update the text with the fruit selected and if it's the Apple, then -- we broadcast an event to enable the Apple Type dropdown. Events . Connect ( \"on_fruit_selected\" , function ( index , option , value ) fruit_text . text = \"You picked \" .. option . text .. \"!\" if ( option . text == \"Apple\" ) then Events . Broadcast ( \"on_apple_type_enable\" ) else Events . Broadcast ( \"on_apple_type_disable\" , true ) apple_text . text = \"\" end end ) -- The other dropdown event and text updating Events . Connect ( \"on_apple_type_selected\" , function ( index , option , value ) apple_text . text = \"You picked \" .. option . text .. \"!\" end ) -- Grab the local player local local_player = Game . GetLocalPlayer () -- Show cursor and allow UI to be intereacted with on player join. Game . playerJoinedEvent : Connect ( function () UI . SetCursorVisible ( true ) UI . SetCanCursorInteractWithUI ( true ) end )","title":"Example"},{"location":"example/#example","text":"The UI Dropdown component comes with a working example that shows you a simple setup along with an example of how to use the events system. Drag and drop the UI Dropdown Example template into your hierarchy. This example already has a client context and UI container setup. Enter play mode and test the 2 drop downs.","title":"Example"},{"location":"example/#example-script","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 -- Text UI components to show what was picked local fruit_text = script : GetCustomProperty ( \"fruit_text\" ): WaitForObject () local apple_text = script : GetCustomProperty ( \"apple_text\" ): WaitForObject () -- Our dropdown has the event set to \"fruit\". -- Here we update the text with the fruit selected and if it's the Apple, then -- we broadcast an event to enable the Apple Type dropdown. Events . Connect ( \"on_fruit_selected\" , function ( index , option , value ) fruit_text . text = \"You picked \" .. option . text .. \"!\" if ( option . text == \"Apple\" ) then Events . Broadcast ( \"on_apple_type_enable\" ) else Events . Broadcast ( \"on_apple_type_disable\" , true ) apple_text . text = \"\" end end ) -- The other dropdown event and text updating Events . Connect ( \"on_apple_type_selected\" , function ( index , option , value ) apple_text . text = \"You picked \" .. option . text .. \"!\" end ) -- Grab the local player local local_player = Game . GetLocalPlayer () -- Show cursor and allow UI to be intereacted with on player join. Game . playerJoinedEvent : Connect ( function () UI . SetCursorVisible ( true ) UI . SetCanCursorInteractWithUI ( true ) end )","title":"Example Script"},{"location":"hierarchy/","text":"Add to Hierarchy Before you can use the component, you will need to place it into your hierarchy. In the Project Content window, find the UI Dropdown component. Drag the component into your hierarchy which should now contain the component like so.","title":"Add to Hierarchy"},{"location":"hierarchy/#add-to-hierarchy","text":"Before you can use the component, you will need to place it into your hierarchy. In the Project Content window, find the UI Dropdown component. Drag the component into your hierarchy which should now contain the component like so.","title":"Add to Hierarchy"},{"location":"options/","text":"Options Creating options is really simple. Deinstance the UI Dropdown component in your hierarchy. Expand the Options folder inside the UI Dropdown component. Create your options here. All the colors and positions are setup automatically by the component. This makes things really easy and fast for you. Options Value Property Sometimes you may need to store a value for an option. This is handy when you use the events and want to grab the value for the option selected. This is made easy by simply creating a custom property called value that will be grabbed and passed to the event handler for you to use. Simply add a custom property to your option. The type can be whatever you want. For example you might have a Weapons dropdown and the option names are made up of weapon names and you might want those to relate to an id. So you can setup a value property with the id of the weapon.","title":"Options"},{"location":"options/#options","text":"Creating options is really simple. Deinstance the UI Dropdown component in your hierarchy. Expand the Options folder inside the UI Dropdown component. Create your options here. All the colors and positions are setup automatically by the component. This makes things really easy and fast for you.","title":"Options"},{"location":"options/#options-value-property","text":"Sometimes you may need to store a value for an option. This is handy when you use the events and want to grab the value for the option selected. This is made easy by simply creating a custom property called value that will be grabbed and passed to the event handler for you to use. Simply add a custom property to your option. The type can be whatever you want. For example you might have a Weapons dropdown and the option names are made up of weapon names and you might want those to relate to an id. So you can setup a value property with the id of the weapon.","title":"Options Value Property"},{"location":"properties/","text":"Properties The UI Dropdown component comes with quite a few properties that allow for easy customisation. Property Name Description event A unique event can be set for broadcasting and listening. See the Events section for more information. hovered_color The color of the dropdown and its options when the mouse is hovered over them. unhovered_color The color of the dropdown and its options when the mouse moves off them. This is the default color. disabled_color The color of the dropdown when it is disabled. border_color The color of the border around the dropdown and options panel. arrow_color The color of the arrow in the dropdown. text_hovered_color The color of the dropdown and options text when the mouse is hovered over them. text_unhovered_color The color of the dropdown and its options when the mouse moves off them. This is the default color. disabled (boolean) If enabled then the dropdown will be disabled at runtime.","title":"Properties"},{"location":"properties/#properties","text":"The UI Dropdown component comes with quite a few properties that allow for easy customisation. Property Name Description event A unique event can be set for broadcasting and listening. See the Events section for more information. hovered_color The color of the dropdown and its options when the mouse is hovered over them. unhovered_color The color of the dropdown and its options when the mouse moves off them. This is the default color. disabled_color The color of the dropdown when it is disabled. border_color The color of the border around the dropdown and options panel. arrow_color The color of the arrow in the dropdown. text_hovered_color The color of the dropdown and options text when the mouse is hovered over them. text_unhovered_color The color of the dropdown and its options when the mouse moves off them. This is the default color. disabled (boolean) If enabled then the dropdown will be disabled at runtime.","title":"Properties"},{"location":"quick-start/","text":"Quick Start If you want to get up and running quickly then follow the steps below. Drag the UI Dropdown component into your UI Container (client context) hierarchy. (Optional) Set an Event name if you want to listen for events. Expand the Options folder and setup your options.","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"If you want to get up and running quickly then follow the steps below. Drag the UI Dropdown component into your UI Container (client context) hierarchy. (Optional) Set an Event name if you want to listen for events. Expand the Options folder and setup your options.","title":"Quick Start"}]}